generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(255)
  email                 String                  @unique @db.VarChar(255)
  password              String
  characters            Character[]
  createdItems          Item[]
  createdItemShops      ItemShop[]
  createdCampaigns      Campaign[]
  ForgottenPasswordLink ForgottenPasswordLink[]
}

model ForgottenPasswordLink {
  id        String   @id @default(uuid())
  createdAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Character {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(255)
  userId             Int
  level              Int       @default(1)
  mettle             Int       @default(0)
  agility            Int       @default(0)
  heart              Int       @default(0)
  intellect          Int       @default(0)
  coin               Int       @default(5)
  languages          String[]  @default(["allspeak"])
  characterClass     String
  characterLineage   String
  characterCulture   String
  currentHealth      Int       @default(0)
  currentStamina     Int       @default(0)
  maxHealth          Int       @default(0)
  maxStamina         Int       @default(0)
  armorName          String    @default("None")
  shieldName         String    @default("None")
  counter            Int
  baseDamage         Int       @default(0)
  rangeMin           Int       @default(0)
  rangeMax           Int       @default(0)
  featureChoiceSlugs String[]
  createdBy          User      @relation(fields: [userId], references: [id])
  items              Item[]    @relation("CharacterToItem")
  campaign           Campaign? @relation(fields: [campaignId], references: [id])
  campaignId         Int?
}

model Item {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(255)
  isMagic            Boolean
  rarity             Rarity?
  uses               Json?
  text               RuleText[]
  heldBy             Character[]          @relation("CharacterToItem")
  createdById        Int                  @default(1)
  createdBy          User                 @relation(fields: [createdById], references: [id])
  effects            Json[]
  couldStock         ItemShop[]           @relation(name: "CouldStockToItem")
  defaultPrice       Int                  @default(0)
  ItemsStockedByShop ItemsStockedByShop[]
  tags               String[]
  slots              Int                  @default(0)
}

model RuleText {
  id     Int      @id @default(autoincrement())
  text   String
  type   String?
  choice String[]
  itemId Int?
  Item   Item?    @relation(fields: [itemId], references: [id])
}

model ItemShop {
  id                 String               @id @default(uuid())
  name               String
  description        String
  itemsCouldStock    Item[]               @relation(name: "CouldStockToItem")
  createdById        Int                  @default(1)
  createdBy          User                 @relation(fields: [createdById], references: [id])
  ItemsStockedByShop ItemsStockedByShop[]
  Campaign           Campaign?            @relation(fields: [campaignId], references: [id])
  campaignId         Int?
}

model ItemsStockedByShop {
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  shop      ItemShop @relation(fields: [shopId], references: [id])
  shopId    String
  salePrice Int?

  @@id([shopId, itemId])
}

model Campaign {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  status      CampaignStatus
  startDate   DateTime
  endDate     DateTime?
  owner       User           @relation(fields: [ownerId], references: [id])
  ownerId     Int
  characters  Character[]
  shops       ItemShop[]
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
  UNIQUE
}

enum CampaignStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}
