type Query {
  genericRules(slug: String): [GenericRule]!

  universalFeatures(slug: String, featureType: FeatureType): [FeatureWithSimpleChoices]!

  lineages(slug: String): [Lineage]!

  cultures(slug: String): [Culture]!

  characterClasses(slug: String): [CharacterClass]!

  searchAll(phrase: String!): [SearchResult]!

  slugMap: [SlugDict]
}

enum FeatureType {
  NOVICE
  VETERAN
}

enum Size {
  MINISCULE
  TINY
  SMALL
  MEDIUM
  LARGE
  GIGANTIC
  COLOSSAL
}

enum RuleType {
  RULE
  FLAVOR
  EG
  LIST
  LISTCOMPACT
  CHOICE
  ATTACK
}

enum Stat {
  METTLE
  AGILITY
  INTELLECT
  HEART
}

enum Complexity {
  SIMPLE
  STANDARD
  COMPLEX
}

enum Action {
  ACTION
  COUNTER
}

enum SearchResultSource {
  rule,
  characterClass,
  culture,
  lineage,
  noviceFeature,
  veteranFeature
}

enum SpeedTypes {
  ground,
  flying,
  swimming
}

interface Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
}

interface Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
}

interface FeatureWithChoice implements Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
  multiSelect: Boolean
}

type SearchResult implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  text: [RuleText]
  page: String
  type: SearchResultSource
}

type RuleText {
  text: String!
  type: String
  options: [String]
}

type Culture implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  description: [String]
  stat: String
  languages: String
  traits: [FeatureWithComplexChoices!]
}

type Speed {
  type: SpeedTypes!
  speed: Int!
}

type Lineage implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  description: [String]
  size: [Size]
  speeds: [Speed]
  stat: String
  traits: [FeatureWithComplexChoices!]
}

type GenericRule implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  ruleType: RuleType
  text: [RuleText]
  subRules: [GenericRule]
  list: [String]
  shortText: String
}

type FeatureWithoutChoices implements Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
}

type FeatureWithSimpleChoices implements FeatureWithChoice & Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
  multiSelect: Boolean
  choices: [RuleText!]
}

type FeatureWithComplexChoices implements FeatureWithChoice & Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
  multiSelect: Boolean
  choices: [FeatureWithoutChoices!]
}

type SlugDict {
  slug: String!
  title: String!
  url: String!
}

type TrainingOptions {
  pick: Int
  options: [String!]!
}

type Weapons {
  melee: TrainingOptions
  ranged: TrainingOptions
  special: TrainingOptions
}

type Training {
  armor: [String]
  shields: [String]
  weapons: Weapons
  magic: TrainingOptions
}

type Range {
  min: Int!
  max: Int!
}

type Damage {
  dice: Int!
  count: Int!
  stat: Stat
  type: [String]
}

type CharacterClassFeature implements FeatureWithChoice & Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  level: Int!
  staminaCost: Int!
  costsFortunesFavor: Boolean!
  ruleType: RuleType
  actionType: Action
  text: [RuleText]
  multiSelect: Boolean
  shortText: String
  choices: [FeatureWithComplexChoices!]
}

type CharacterClass implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  complexity: Complexity
  description: [String]!
  health: Int!
  healthOnLevel: Int!
  stamina: Int!
  staminaOnLevel: Int!
  staminaStat: Stat!
  training: Training!
  attackStat: [Stat!]
  range: Range!
  damage: Damage!
  features: [CharacterClassFeature]!
  extra: ShifterForms
}

type ShifterForms { 
  forms: [ShifterForm]
}

type ShifterForm implements Rule{
  title: String!
  slug: String!
  href: String
  shortTitle: String
  size: Size!
  attackStat: Stat!
  damage: [Damage]!
  armor: shifterArmor
  features: [shifterFeature]
}

type shifterArmor {
  stat: Stat
  baseArmor: Int!
}

type shifterFeature {
  title: String
  text: String!
}
