type Query {
  genericRules(slug: String, version: VERSIONS): [GenericRule]!

  universalFeatures(
    slug: String
    featureType: FeatureType
    version: VERSIONS
  ): [GenericFeature]!

  lineages(slug: String, version: VERSIONS): [Lineage]!

  cultures(slug: String, version: VERSIONS): [Culture]!

  characterClasses(slug: String, version: VERSIONS): [CharacterClass]!

  searchAll(phrase: String!, version: VERSIONS): [SearchResult]!

  slugMap: [SlugDict]

  user(id: ID!): User

  users: [User]!

  me: User

  character(id: ID!): Character

  rules(ruleSectionsToInclude: [RuleSectionNames]): [RuleSection]!

  itemShop(id: ID): ItemShop

  allShops: [ItemShop]

  allItems: [Item]

  campaign(id: ID!): Campaign

  myCampaigns: MyCampaignsResult!

  allCampaigns: [Campaign]!
}

type Mutation {
  createUser(name: String, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createCharacter(input: CharacterInput): Character
  updateCharacter(id: ID!, input: CharacterInput): Character
  deleteCharacter(id: ID!): Boolean
  createShop(input: ItemShopInput): ItemShop
  updateShop(id: ID!, input: ItemShopInput): ItemShop
  deleteShop(id: ID!): Boolean
  createCampaign(input: CampaignInput!): Campaign!
  updateCampaign(
    id: ID!
    input: CampaignInput!
    characterIds: [ID!]
    shopIds: [ID!]
  ): Campaign!
  deleteCampaign(id: ID!): Boolean!
  addCharacterToCampaign(campaignId: ID!, characterId: ID!): Campaign!
  removeCharacterFromCampaign(campaignId: ID!, characterId: ID!): Campaign!
  addShopToCampaign(campaignId: ID!, shopId: ID!): Campaign!
  removeShopFromCampaign(campaignId: ID!, shopId: ID!): Campaign!
}

#########
# ENUMS #
#########

enum VERSIONS {
  _1a
  _1b
}

enum FeatureType {
  NOVICE
  VETERAN
}

enum Size {
  MINISCULE
  TINY
  SMALL
  MEDIUM
  LARGE
  GIGANTIC
  COLOSSAL
}

enum RuleType {
  RULE
  FLAVOR
  EG
  LIST
  LISTCOMPACT
  CHOICE
  ATTACK
}

enum StatOptions {
  METTLE
  AGILITY
  INTELLECT
  HEART
}

enum Complexity {
  SIMPLE
  STANDARD
  COMPLEX
}

enum Action {
  ACTION
  COUNTER
}

enum SearchResultSource {
  rule
  characterClass
  culture
  lineage
  noviceFeature
  veteranFeature
}

enum SpeedTypes {
  ground
  flying
  swimming
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
  UNIQUE
}

enum RechargeOn {
  NONE
  CATCH_BREATH
  NIGHTS_REST
  REST_AND_RECUPERATE
}

enum RuleSectionNames {
  PLAYER
  GM
  MONSTERS
}

enum CampaignStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

#########
# union #
#########

union FeatureChoices = RuleText | FeatureWithoutChoices

#########
# TYPES #
#########

interface Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
}

interface Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
}

type SearchResult implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  text: [RuleText]
  page: String
  type: SearchResultSource
}

type RuleText {
  text: String!
  type: String
  choices: [String]
}

type Culture implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  description: [String]
  stat: String
  languages: String
  traits: [GenericFeature!]
}

type Speed {
  type: SpeedTypes!
  speed: Int!
}

type Lineage implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  description: [String]
  size: [Size]
  speeds: [Speed]
  stat: String
  traits: [GenericFeature!]
}

type GenericRule implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  ruleType: RuleType
  text: [RuleText]
  subRules: [GenericRule]
  lists: [List]
  shortText: String
}

type List {
  label: String
  items: [String]!
}

type GenericFeature implements Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
  multiSelect: Boolean
  choices: [FeatureChoices!]
  chooseNum: Int
  featureType: FeatureType
}

type FeatureWithoutChoices implements Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  staminaCost: Int
  costsFortunesFavor: Boolean
  actionType: Action
  ruleType: RuleType
  text: [RuleText]
  shortText: String
  multiSelect: Boolean
}

type SlugDict {
  slug: String!
  title: String!
  url: String!
}

type TrainingOptions {
  pick: Int
  options: [String!]!
}

type Weapons {
  melee: TrainingOptions
  ranged: TrainingOptions
  special: TrainingOptions
}

type Training {
  armor: [String]
  shields: [String]
  weapons: Weapons
  magic: TrainingOptions
}

type Range {
  min: Int!
  max: Int!
}

type Damage {
  dice: Int!
  count: Int!
  stat: [StatOptions!]
  type: [String]
}

type Deflect {
  dice: Int!
  count: Int!
  flat: Int
}

type CharacterClassFeature implements Feature {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  level: Int!
  staminaCost: Int!
  costsFortunesFavor: Boolean!
  ruleType: RuleType
  actionType: Action
  text: [RuleText]
  multiSelect: Boolean
  shortText: String
  choices: [FeatureChoices!]
  chooseNum: Int
}

type CharacterClass implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  complexity: Complexity
  description: [String]!
  health: Int!
  healthOnLevel: Int!
  stamina: Int!
  staminaOnLevel: Int!
  staminaStat: StatOptions!
  training: Training!
  attackStat: [StatOptions!]
  range: Range!
  damage: Damage!
  deflect: Deflect!
  features: [CharacterClassFeature]!
  extra: CharacterExtras
}

type CharacterExtras {
  forms: [ShifterForm!]
  beastMasterPet: BeastmasterPet
}

type ShifterForm implements Rule {
  title: String!
  slug: String!
  href: String
  shortTitle: String
  size: Size!
  attackStat: StatOptions!
  damage: [Damage]!
  armor: shifterArmor
  features: [shifterFeature]
}

type shifterArmor {
  stat: StatOptions
  baseArmor: Int!
}

type shifterFeature {
  title: String
  text: String!
}

type BeastmasterPet {
  title: String!
  slug: String!
  description: [String]!
  beasts: [BeastForm!]!
}

type BeastForm {
  title: String!
  slug: String!
  size: Size!
  health: BeastHealth!
  stats: BeastStats!
  speed: [Speed!]!
  damage: Damage!
  abilities: [BeastAbility!]!
}

type BeastHealth {
  base: Int!
  perLevel: Int!
}

type BeastStats {
  mettle: Int!
  agility: Int!
  heart: Int!
  intellect: Int!
}

type BeastAbility {
  type: String!
  title: String!
  text: String!
}

type User {
  id: ID!
  name: String
  email: String!
  characters: [Character]
  createdShops: [ItemShop]
  createdCampaigns: [Campaign]
}

type AuthPayload {
  token: String
  user: User
}

type Character {
  campaign: Campaign
  id: ID!
  name: String!
  createdBy: User!
  items: [Item]!
  level: Int!
  mettle: Int!
  agility: Int!
  heart: Int!
  intellect: Int!
  coin: Int!
  languages: [String]!
  characterClass: CharacterClass!
  characterLineage: Lineage!
  characterCulture: Culture!
  currentHealth: Int
  currentStamina: Int
  maxHealth: Int!
  maxStamina: Int!
  armorName: String!
  shieldName: String!
  counter: Int!
  baseDamage: Int!
  rangeMin: Int!
  rangeMax: Int!
  featureChoiceSlugs: [String]
}

input CharacterInput {
  name: String!
  items: [ItemInput]
  level: Int!
  mettle: Int!
  agility: Int!
  heart: Int!
  intellect: Int!
  coin: Int!
  languages: [String]!
  characterClass: String!
  characterLineage: String!
  characterCulture: String!
  maxHealth: Int!
  maxStamina: Int!
  armorName: String!
  shieldName: String!
  counter: Int!
  baseDamage: Int!
  rangeMin: Int!
  rangeMax: Int!
  featureChoiceSlugs: [String]
  currentHealth: Int
  currentStamina: Int
}

type Item {
  id: ID!
  title: String!
  isMagic: Boolean!
  rarity: Rarity
  uses: Uses
  text: [RuleText]!
  effects: [Effect]!
  heldBy: [Character]!
  createdBy: User!
  couldStock: [ItemShop]!
  defaultPrice: Int!
  salePrice: Int
  tags: [String]!
  inStock: Boolean!
}

type Uses {
  used: Int!
  max: Int!
  rechargeOn: RechargeOn!
}

input UsesInput {
  used: Int!
  max: Int!
  rechargeOn: RechargeOn!
}

input ItemInput {
  id: ID
  title: String!
  isMagic: Boolean!
  rarity: Rarity
  uses: UsesInput
  text: [RuleTextInput]!
  effects: [EffectInput]!
  defaultPrice: Int!
  tags: [String]!
}

type ItemShop {
  id: ID!
  name: String!
  description: String!
  itemsInStock: [Item]!
  itemsCouldStock: [Item]!
  createdBy: User!
  canEdit: Boolean!
}

input ItemShopInput {
  id: ID
  name: String!
  description: String!
  itemsInStock: [ItemInStockInput]!
  itemsCouldStock: [ItemInput]!
}

input ItemInStockInput {
  id: ID
  title: String!
  isMagic: Boolean!
  rarity: Rarity
  uses: UsesInput
  text: [RuleTextInput]!
  effects: [EffectInput]!
  defaultPrice: Int!
  tags: [String]!
  salePrice: Int
}

type Effect {
  target: String!
  operation: String!
  value: Int!
  condition: String
}

input EffectInput {
  target: String!
  operation: String!
  value: Int!
  condition: String
}

input RuleTextInput {
  text: String!
  type: String
  choices: [String]
}

type RuleSection {
  sectionName: String!
  rules: [GenericRule]!
}

type Campaign {
  id: ID!
  name: String!
  description: String!
  status: CampaignStatus!
  startDate: String!
  endDate: String
  owner: User!
  characters: [Character]!
  shops: [ItemShop]!
}

input CampaignInput {
  name: String!
  description: String!
  status: CampaignStatus!
  startDate: String!
  endDate: String
}

type MyCampaignsResult {
  owned: [Campaign]!
  in: [Campaign]!
}
